openapi: 3.0.3
info:
  title: OID4VC Keycloak Extension
  description: OID4VC API spec for the Keycloak
  version: 0.0.1
externalDocs:
  description: API Documentation
  url: https://openid.net/sg/openid4vc/specifications/
tags:
  - name: OIDC4VCI
    description: Pre-Authorized Code Token Request

paths:
  /realms/ssi/.well-known/openid-configuration:
    get:
      tags:
        - OIDC4VCI
      operationId: get OAuth 2.0 Authorization Server Metadata
      summary: provides the OAuth 2.0 Authorization Server Metadata
      responses:
        '200':
          description: >
            https://openid.github.io/OpenID4VCI/openid-4-verifiable-credential-issuance-wg-draft.html#name-oauth-20-authorization-serv
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServerMetadata'
  /realms/ssi/preauthorized-code:
    post:
      tags:
        - OIDC4VCI
      summary: Pre-Authorized Code Grant Endpoint
      description: >
        Provides the Issuer a pre-authorized code and transaction code details. The `authorization_details` is required to tie the request to a specific Credential Configuration.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Email address to send the tx_code.
      responses:
        '200':
          description: >
            A valid response containing the pre-authorized code and optional transaction code details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreAuthorizedCodeGrant'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /realms/ssi/token:
    post:
      tags:
        - OIDC4VCI
      summary: Token Request for Pre-Authorized Code Flow
      description: >
        This endpoint accepts the pre-authorized code, transaction code, and returns an OAuth 2.0 Access Token. The `tx_code` is mandatory and the authorization details must specify the type of credential being issued.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  enum:
                    - "urn:ietf:params:oauth:grant-type:pre-authorized_code"
                  description: The grant type for requesting a token using a pre-authorized code.
                  example: "urn:ietf:params:oauth:grant-type:pre-authorized_code"
                pre-authorized_code:
                  type: string
                  description: The pre-authorized code received from the preauthorization request.
                  example: "SplxlOBeZQQYbYS6WxSbIA"
                tx_code:
                  type: string
                  description: >
                    The transaction code received by the user via a separate channel (e.g., email). Required for binding the transaction.
                  example: "493536"
      responses:
        '200':
          description: >
            A valid response containing the OAuth 2.0 Access Token and additional information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: Invalid or missing parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /realms/ssi/validate-nonce:
    post:
      tags:
        - OIDC4VCI
      summary: Validate Nonce and Return Fresh Nonce
      description: >
        Validates the nonce from a Token Response. If the nonce is valid, a fresh nonce is returned.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                nonce:
                  type: string
                  description: The nonce to be validated.
                  example: "exampleNonce123"
      responses:
        '201':
          description: >
            The nonce is valid. A fresh nonce is returned for the client.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FreshNonceResponse'
        '400':
          description: >
            Invalid or expired nonce.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: >
            Unauthorized request. Missing or invalid Authorization header.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            Nonce not found or expired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:

  schemas:
    # https://openid.github.io/OpenID4VCI/openid-4-verifiable-credential-issuance-wg-draft.html#name-oauth-20-authorization-serv
    AuthorizationServerMetadata:
      type: object
      description: >
        This specification also defines a new OAuth 2.0 Authorization Server metadata [RFC8414] parameter to publish
        whether the Authorization Server that the Credential Issuer relies on for authorization supports anonymous
        Token Requests with the Pre-Authorized Grant Type.
      properties:
        issuer:
          type: string
          format: url
          description: >
            URL using the https scheme with no query or fragment component that the Wallet uses to obtain the
            Credential Issuer's metadata.
        pre-authorized_grant_endpoint:
          type: string
          format: url
          description: >
            URL of the Authorization Server's Pre-Authorized Grant Endpoint, as defined in Section 6.1. This URL
            MUST use the https scheme and MAY contain port, path, and query parameter components.
        pre-authorized_grant_anonymous_access_supported:
          type: boolean
          description: >
            A boolean indicating whether the Credential Issuer accepts a Token Request with a Pre-Authorized Code
            but without a client_id. The default is false.
        grant_types_supported:
            type: array
            items:
                type: string
                enum:
                - "urn:ietf:params:oauth:grant-type:pre-authorized_code"
        response_types_supported:
            type: array
            items:
                type: string
                enum:
                - "token"

    AuthorizationDetailsArray:
      type: array
      description: >
        An array containing objects that specify the type of credential being issued and related configuration details.
      items:
        $ref: '#/components/schemas/AuthorizationDetails'

    AuthorizationDetails:
      type: object
      description: >
        An object specifying the type of credential being issued and related configuration details.
      properties:
        type:
          type: string
          description: Credential type (always 'openid_credential')
          example: openid_credential
        credential_configuration_id:
          type: string
          description: The ID of the credential configuration being issued.
          example: UniversityDegreeCredential
        credential_identifiers:
          type: array
          items:
            type: string
          description: Array of strings, each uniquely identifying a Credential Dataset that can be issued using the Access Token.
          example: [ "CivilEngineeringDegree-2023", "ElectricalEngineeringDegree-2023" ]
      required:
        - credential_configuration_id

    PreAuthorizedCodeGrant:
      type: object
      description: >
        Object indicating to the Wallet the Grant Types the Credential Issuer's Authorization Server is prepared to process for this Credential Offer. Every grant is represented by a name/value pair. The name is the Grant Type identifier; the value is an object that contains parameters either determining the way the Wallet MUST use the particular grant and/or parameters the Wallet MUST send with the respective request(s). If grants is not present or is empty, the Wallet MUST determine the Grant Types the Credential Issuer's Authorization Server supports using the respective metadata. When multiple grants are present, it is at the Wallet's discretion which one to use.
      properties:
        urn:ietf:params:oauth:grant-type:pre-authorized_code:
          type: object
          properties:
            pre-authorized_code:
              type: string
              description: >
                The code representing the Credential Issuer's authorization for the Wallet to obtain Credentials of a certain type. This code MUST be short lived and single use. If the Wallet decides to use the Pre-Authorized Code Flow, this parameter value MUST be included in the subsequent Token Request with the Pre-Authorized Code Flow.
              example: "oaKazRN8I0IbtZ0C7JuMn5"
            tx_code:
              type: object
              description: >
                Object describing the requirements for a Transaction Code, which the Authorization Server expects the End-User to present along with the Token Request in a Pre-Authorized Code Flow. If the Authorization Server does not expect a Transaction Code, this object is absent; this is the default. The Transaction Code is intended to bind the Pre-Authorized Code to a certain transaction to prevent replay of this code by an attacker that, for example, scanned the QR code while standing behind the legitimate End-User. It is RECOMMENDED to send the Transaction Code via a separate channel. If the Wallet decides to use the Pre-Authorized Code Flow, the Transaction Code value MUST be sent in the tx_code parameter with the respective Token Request as defined in Section 6.1. If no length or description is given, this object may be empty, indicating that a Transaction Code is required
              properties:
                input_mode:
                  type: string
                  description: >
                    String specifying the input character set. Possible values are numeric (only digits) and text (any characters). The default is numeric.
                  example: "numeric"
                length:
                  type: integer
                  description: >
                    Integer specifying the length of the Transaction Code. This helps the Wallet to render the input screen and improve the user experience.
                  example: 6
                description:
                  type: string
                  description: >
                    String containing guidance for the Holder of the Wallet on how to obtain the Transaction Code, e.g., describing over which communication channel it is delivered. The Wallet is RECOMMENDED to display this description next to the Transaction Code input screen to improve the user experience. The length of the string MUST NOT exceed 300 characters. The description does not support internationalization, however the Issuer MAY detect the Holder's language by previous communication or an HTTP Accept-Language header within an HTTP GET request for a Credential Offer URI.
                  example: "Please provide the one-time code that was sent via e-mail"
            authorization_server:
              type: string
              format: url
              example: "https://example.com/realms/ssi-dev"
          required:
            - pre-authorized_code
            - tx_code

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          enum:
            - invalid_request
            - invalid_token
            - unsupported_credential_type
            - unsupported_grant_type
            - invalid_tx_code
            - invalid_nonce
          example: "invalid_request"
        message:
          type: string
          example: "The Credential Request is invalid or unauthorized"

    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
          description: The Access Token.
          example: eyJhbGciOiJSUzI1NiIsI....ZS04NDdRiY2MyRtaW4tdXNlckBmaXdhcmUub3JnI
        token_type:
          type: string
          enum: ["bearer"]
        expires_in:
          type: number
          example: 86400
        c_nonce:
          type: string
          example: tZignsnFbp
        c_nonce_expires_in:
          type: number
          example: 86400
        authorization_details:
          type: array
          description: >
            Required when the authorization_details parameter is used to request issuance of a certain Credential Configuration.
          items:
            $ref: '#/components/schemas/AuthorizationDetails'
      required:
        - access_token
        - token_type
        - expires_in

    FreshNonceResponse:
      type: object
      properties:
        c_nonce:
          type: string
          description: A fresh nonce generated after validating the existing one.
          example: "tZignsnFbp"
        c_nonce_expires_in:
          type: number
          description: Expiration time for the fresh nonce in seconds.
          example: 86400
      required:
        - c_nonce
        - c_nonce_expires_in
